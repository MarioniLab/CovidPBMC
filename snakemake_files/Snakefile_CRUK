import pandas as pd
import os
import re

#############################################################################
# M.D. Morgan, K. Bach
# COVID19 scRNA-seq pipeline 
# This pipeline takes FASTQ files generated using the 10X Chromium platform, QCs, aligns and quant them 
# using the STAR aligner, and internal barcode assignment using CellRanger. Cell barcodes representing 
# bonafide cells are called outside of Cell Ranger using emptyDrops.
# The final steps are single-cell QC, normalisation and report generation
# Usage:
# EBI:
# nohup nice -19 snakemake -s CovidPBMC/snakemake_files/Snakefile --cluster "bsub -q research-rh74 -M {cluster.memory} -R {cluster.resources} -n {cluster.nCPUs} -T {cluster.threads} 
#                        -J {cluster.name} -e {cluster.error} -o {cluster.output}" --cluster-config CovidPBMC/cluster_config/cluster.json --jobs=100 --latency-wait=250 --verbose --rerun-incomplete -rp&

# CRUK
# nohup nice -19 snakemake -s CovidPBMC/snakemake_files/Snakefile --cluster "sbatch --cpus-per-taks={cluster.nCPUs} --nodes={cluster.nodes} --job-name={cluster.name} --mem={cluster.memory} --output={cluster.output} --error={cluster.error} " --cluster-config CovidPBMC/cluster_config/CRUK_cluster.json --jobs=100 --latency-wait=250 --verbose --rerun-incomplete -rp&

#############################################################################
# make sure no trailing spaces after key:value pairs in the config yaml - this took me >1hour to figure out!!
configfile: "CovidPBMC/config/configCRUK.yaml"

BASE_DIR = "/mnt/scratchb/jmlab/morgan02/Covid/"

workdir: BASE_DIR

## Make sure the the test samples are commented out for running genuine samples
## Regex for the differnt filename components
SAMPLES = [fx for fx in glob_wildcards(BASE_DIR + "data/fastq/{sample}.fastq.gz")][0]
CITE_REGEX = re.compile("(\w+)_(5gex|antibody)_(S[0-9]?)_(L[0-9]+)_([R|I][1|2])_00[0-9]")
TCR_REGEX = re.compile("(\w+)_t_(S[0-9]?)_(L[0-9]+)_([R|I][1|2])_00[0-9]")
BCR_REGEX = re.compile("(\w+)_b_(S[0-9]?)_(L[0-9]+)_([R|I][1|2])_00[0-9]")
CITE_SAMPLES = [gx for gx in SAMPLES if CITE_REGEX.search(gx)]
TCR_SAMPLES = [tx for tx in SAMPLES if TCR_REGEX.search(tx)]
BCR_SAMPLES = [bx for bx in SAMPLES if BCR_REGEX.search(bx)]

VIRAL_REFERENCE=config['Reference']['virus'].split(",")

#Load Singularity 3.5 module for each shell command
# already loaded on the CI server
#shell.prefix("module load singularity/3.5.0; ")

#############################################################################
# Define a set of tasks to run locally
############################################################################
localrules: all

#############################################################################
# Input Rule - all inputs to later rules need to be the output of another rule
# or need to already exist
#############################################################################
rule all:
     input: expand(BASE_DIR + "cellranger_output/{sample}_CITE/outs/raw_feature_bc_matrix/matrix.mtx.gz", sample=[CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES]), # just check for files used in latter rules
            expand(BASE_DIR + "cellranger_output/{sample}_CITE/outs/possorted_genome_bam.bam", sample=[CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES]),
            expand(BASE_DIR + "cellranger_output/{sample}_TCR", sample=[TCR_REGEX.search(to).group(1) for to in TCR_SAMPLES]),
            expand(BASE_DIR + "cellranger_output/{sample}_BCR", sample=[BCR_REGEX.search(bo).group(1) for bo in BCR_SAMPLES]),
            expand(BASE_DIR + "quant.dir/{sample}_cells.txt", sample=[CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES]),
            expand(BASE_DIR + "reports/{sample}_emptyDrops.pdf", sample=[CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES]),
            expand(BASE_DIR + "reports/{sample}_QC.pdf", sample=[CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES]),
            BASE_DIR + "SCE/Covid_SCE.RDS",
            expand(BASE_DIR + "genotypes/cellSNP/{sample}.vcf.gz", sample=[CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES]),
            expand(BASE_DIR + "genotypes/vartrix/{sample}_alt_matrix.mtx", sample=[CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES]),
            expand(BASE_DIR + "genotypes/vartrix/{sample}_ref_matrix.mtx", sample=[CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES]),
            expand(BASE_DIR + "demultiplexed/cellSNP_vireo/{sample}", sample=[CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES]),
            expand(BASE_DIR + "demultiplexed/vartrix_vireo/{sample}", sample=[CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES]),
            BASE_DIR + "reports/ADT-QC.pdf",
            BASE_DIR + "doublet/doublets/Doublets.csv",
            expand(BASE_DIR + "unmapped_bams/{sample}_unmapped.bam", sample=[CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES]),
            expand(BASE_DIR + "unmapped_bams/{sample}.fastq.gz", sample=[CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES]),
            expand(BASE_DIR + "fasta/{reference}.bwt", reference=VIRAL_REFERENCE),
            expand(BASE_DIR + "fasta/{reference}.fasta.fai", reference=VIRAL_REFERENCE),
            expand(BASE_DIR + "bam.dir/{sample}.{reference}.sam", sample=[CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES], reference=VIRAL_REFERENCE)


#############################################################################
# Run GEX & ADT Cell Ranger
# Might need to institute a check to remove the output folder as cellranger doesn't have a --force option
#############################################################################
rule run_CITE_cellranger:
    """
    Run CellRanger to process gene expression and Antibody libraries
    """
    input: # input needs to be the feature reference in case this is different
        libs=BASE_DIR + "data/lib_files/{sample}_5gex_protein_library.csv",
        feature_refs=BASE_DIR + "data/ref_files/{sample}_5gex_protein_feature_ref.csv"
    params:
        sampname="{sample}_CITE",
        transcriptome=config['hg38_SarsCov2']['referenceFolder'],
        #feature_refs=config['params']['featureReference'],
        cellranger_out="cellranger_output/"
    output:
        #outdir=directory(BASE_DIR + "cellranger_output/{sample}_CITE"),
        matrix=BASE_DIR + "cellranger_output/{sample}_CITE/outs/raw_feature_bc_matrix/matrix.mtx.gz", # both of these outputs are for pipeline tracking, they aren't explicitly used in the shell command below
        bam=BASE_DIR + "cellranger_output/{sample}_CITE/outs/possorted_genome_bam.bam"
    log:
        "logs/cellranger_{sample}_CITE.log"
    shell: # might need to be careful with this rm command - this is because snakemake makes all directories that don't exist - which in this case causes cellranger to crash!!
        "cd %s/cellranger_output/; rm -rf {params.sampname}; singularity exec {config[singularity][preamble]} {config[singularity][img]} cellranger count --id={params.sampname} --transcriptome={params.transcriptome} --libraries={input.libs} --feature-ref={input.feature_refs}  --localcores=24 --localmem=60 --nosecondary; cd %s" % (BASE_DIR, BASE_DIR)

#############################################################################
# Run TCR Cell Ranger
#############################################################################
rule run_TCR_cellranger:
    """
    Run CellRanger to process TCR libraries
    """
    input:
        files=["data/fastq/{filename}.fastq.gz".format(filename=TCR_REGEX.search(tx).group(0)) for tx in TCR_SAMPLES]
    params:
        sampname=list(set(["{filename}_t".format(filename=TCR_REGEX.search(rx).group(1)) for rx in TCR_SAMPLES])),
        reference=config['hg38_vdj']['referenceFolder'],
        fastq_dir="{wdir}/data/fastq".format(wdir=BASE_DIR),
        cellranger_out="cellranger_output/",
        samp_id="{sample}_TCR"
    output:
        outs=directory(BASE_DIR + "cellranger_output/" + "{sample}_TCR")
    shell:
        "cd %s/cellranger_output/; singularity exec {config[singularity][preamble]} {config[singularity][img]} cellranger vdj --id={params.samp_id} --fastqs={params.fastq_dir} --reference={params.reference} --sample={params.sampname} --localcores=24 --localmem=60; cd %s" % (BASE_DIR, BASE_DIR)

#############################################################################
# Run BCR Cell Ranger
#############################################################################
rule run_BCR_cellranger:
    """
    Run CellRanger to process BCR libraries
    """
    input:
        files=["data/fastq/{filename}.fastq.gz".format(filename=BCR_REGEX.search(bx).group(0)) for bx in BCR_SAMPLES] 
    params:
        sampname=list(set(["{filename}_b".format(filename=BCR_REGEX.search(rx).group(1)) for rx in BCR_SAMPLES])),
        reference=config['hg38_vdj']['referenceFolder'],
        fastq_dir="{wdir}/data/fastq".format(wdir=BASE_DIR),
        samp_id="{sample}_BCR"
    output:
        outs=directory(BASE_DIR + "cellranger_output/" + "{sample}_BCR")
    shell:
        "cd %s/cellranger_output/; singularity exec {config[singularity][preamble]} {config[singularity][img]} cellranger vdj --id={params.samp_id} --fastqs={params.fastq_dir}  --reference={params.reference} --sample={params.sampname} --localcores=24 --localmem=60; cd %s" % (BASE_DIR, BASE_DIR)

#############################################################################
# Run emptyDrops to call valid cellbarcodes
#############################################################################
rule run_emptyDrops:
    """
    Run emptyDrops on the unfiltered cellranger CITE-seq output
    """
    input:
        matrix=BASE_DIR + "cellranger_output/{sample}_CITE/outs/raw_feature_bc_matrix/matrix.mtx.gz",
    params:
        umi=config['emptyDrops']['umi_threshold'],
        fdr=config['emptyDrops']['fdr_threshold'],
        emptydrops_rscript=config['emptyDrops']['emptydrops_rscript']
    output:
        barcodes=BASE_DIR + "quant.dir/{sample}_cells.txt",
        plots=BASE_DIR + "reports/{sample}_emptyDrops.pdf"
    shell:
        "singularity exec {config[singularity][preamble]} {config[singularity][img]} Rscript {params.emptydrops_rscript} --input {input} --out {output.barcodes} --fdrthreshold {params.fdr} --umithreshold {params.umi} --logs {output.plots}"

#############################################################################
# Run single-cell genotyping with cellSNP
#############################################################################
rule run_scGenotyping_cellSNP:
    """
    Genotyping single-cells from scRNA-sequencing reads with cellSNP
    """
    input:
        bam=BASE_DIR + "cellranger_output/{sample}_CITE/outs/possorted_genome_bam.bam",
        barcodes=BASE_DIR + "quant.dir/{sample}_cells.txt"
    params:
        hg38_vcf=config['genotyper']['ref_vcf'],
	min_MAF=config['genotyper']['min_MAF'],
	min_Count=config['genotyper']['min_Count']
    output:
        vcf=BASE_DIR + "genotypes/cellSNP/{sample}.vcf.gz"
    shell:
        "singularity exec {config[singularity][preamble]} {config[singularity][img]} cellSNP -s {input.bam} -b {input.barcodes} -R {params.hg38_vcf} -p 20 --minMAF {params.min_MAF} --minCOUNT {params.min_Count} -o {output.vcf}"

#############################################################################
# Run single-cell genotyping with vartrix
#############################################################################
rule run_scGenotyping_vartrix:
    """
    Genotyping single-cells from scRNA-sequencing reads with vartrix
    """
    input:
        bam=BASE_DIR + "cellranger_output/{sample}_CITE/outs/possorted_genome_bam.bam",
        barcodes=BASE_DIR + "quant.dir/{sample}_cells.txt"
    params:
        hg38_vcf=config['genotyper']['ref_vcf'],
	genome=config['hg38_SarsCov2']['fasta']
    output:
        ref_mtx=BASE_DIR + "genotypes/vartrix/{sample}_ref_matrix.mtx",
        alt_mtx=BASE_DIR + "genotypes/vartrix/{sample}_alt_matrix.mtx"
    shell:
        "singularity exec {config[singularity][preamble]} {config[singularity][img]} vartrix --vcf {params.hg38_vcf} --bam {input.bam} --fasta {params.genome} --cell-barcodes {input.barcodes} --threads 20 --log-level info --scoring-method coverage --out-matrix {output.alt_mtx} --ref-matrix {output.ref_mtx}"

#############################################################################
# Run single-cell de-multiplexing by genotype with vireo using vartrix output
#############################################################################
rule demultiplex_cells_vartrix:
    """
    De-multiplex single-cells from genetically distinct donors using vartrix+vireo
    """
    input:
        ref_mtx=BASE_DIR + "genotypes/vartrix/{sample}_ref_matrix.mtx",
        alt_mtx=BASE_DIR + "genotypes/vartrix/{sample}_alt_matrix.mtx",
        barcodes=BASE_DIR + "quant.dir/{sample}_cells.txt"
    output:
        outs=directory(BASE_DIR + "demultiplexed/" + "vartrix_vireo/" + "{sample}")
    shell:
        "singularity exec {config[singularity][preamble]} {config[singularity][img]} vireo --vartrixData {input.alt_mtx},{input.ref_mtx},{input.barcodes} --nDonor 4 --outDir {output} --randSeed 42 --noPlot" 

#############################################################################
# Run single-cell de-multiplexing by genotype with vireo using cellSNP output
#############################################################################
rule demultiplex_cells_cellSNP:
    """
    De-multiplex single-cells from genetically distinct donors using cellSNP+vireo
    """
    input:
        vcf=BASE_DIR + "genotypes/cellSNP/{sample}.vcf.gz"
    output:
        outs=directory(BASE_DIR + "demultiplexed/" + "cellSNP_vireo/" + "{sample}")
    shell:
        "singularity exec {config[singularity][preamble]} {config[singularity][img]} vireo --cellData {input.vcf} --nDonor 4 --outDir {output} --randSeed 42 --noPlot" 

#############################################################################
# Single-cell CITE-seq QC
#############################################################################
rule run_singlecell_qc:
    """
    Run single-cell CITE-seq gene expression through standard QC - per sample
    """
    input:
        matrix=BASE_DIR + "cellranger_output/{sample}_CITE/outs/raw_feature_bc_matrix/matrix.mtx.gz",
        called_cells=BASE_DIR + "quant.dir/{sample}_cells.txt"
    params:
        mt_thresh=config['QC']['mt_thresh'],
        umi_thresh=config['QC']['umi_thresh'],
        sparse_thresh=config['QC']['sparsity'],
        qc_rscript=config['QC']['qc_rscript']
    output:
        barcodes=BASE_DIR + "QC/{sample}_barcode-whitelist.txt",
        plots=BASE_DIR + "reports/{sample}_QC.pdf"
    shell:
        "singularity exec {config[singularity][preamble]} {config[singularity][img]} Rscript {params.qc_rscript} --matrix {input.matrix} --barcodes {input.called_cells} --sparsitythreshold {params.sparse_thresh} --umithreshold {params.umi_thresh} --mtthreshold {params.mt_thresh} --plots {output.plots} --out {output.barcodes}"

#############################################################################
# Single-cell normalisation with deconvolution size factors
#############################################################################
rule normalise_gex:
    """
    Normalise gene expression and generate a combined single cell experiment object.
    This rule aggregates across samples.
    """
    input:
        counts_matrices=expand(BASE_DIR + "cellranger_output/{sample}_CITE/outs/raw_feature_bc_matrix/matrix.mtx.gz", sample=set([CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES])),
        cell_barcodes=expand(BASE_DIR + "quant.dir/{sample}_cells.txt", sample=set([CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES])),
        barcode_whitelist=expand(BASE_DIR + "QC/{sample}_barcode-whitelist.txt", sample=set([CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES]))
    params:
        gene_sparse=config['Norm']['gene_sparse'],
        norm_rscript=config['Norm']['norm_rscript'],
        qc_flag=config['Norm']['qc_flag'], # whether to also compute size factors for QC-fail cells
        all_positive=config['Norm']['positive_factors'],
        join_matrices=lambda wildcards, input: ",".join(input.counts_matrices), # stitch together inputs as comma-separated lists (required for R optparse)
        join_barcodes=lambda wildcards, input: ",".join(input.cell_barcodes),
        join_whitelist=lambda wildcards, input: ",".join(input.barcode_whitelist)
    output:
        sce=BASE_DIR + "SCE/Covid_SCE.RDS",
        sizefactors=BASE_DIR + "SCE/Covid_SumFactors.tsv",
        plots=BASE_DIR + "reports/Covid_norm.pdf"
    shell:
        """singularity exec {config[singularity][preamble]} {config[singularity][img]} Rscript {params.norm_rscript} --matrixlist {params.join_matrices} --barcodeslist {params.join_barcodes} \
        --whitelists {params.join_whitelist} --sparsity {params.gene_sparse} --output {output.sce} --sizefactors {output.sizefactors} --plots {output.plots} {params.qc_flag} {params.all_positive}"""


###############################################################################
# Peform ADT-specific diagnostic for seq coverage, etc
##############################################################################
rule run_adt_qc:
    """
    Run QC diagnostics on ADT libraries to check for sufficient coverage and balance
    """
    input:
        in_sce=BASE_DIR + "SCE/Covid_SCE.RDS",
        cellranger_dir=directory(expand(BASE_DIR + "cellranger_output/{sample}_CITE", sample=set([CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES])))
    params:
        adt_qc_rscript=config['ADT']['qc_rscript']
    output:
        plots=BASE_DIR + "reports/ADT-QC.pdf"
    shell:
        """ singularity exec {config[singularity][preamble]} {config[singularity][img]} Rscript {params.adt_qc_rscript} --CITEdirectory {input.cellranger_dir} --ADTSCE {input.in_sce} --plots {output.plots}"""


###############################################################################
# Extract unmapped reads for each input single-cell sample
###############################################################################
rule extract_unmapped_reads:
    """
    Extract un-mapped single-cell reads that are proper paired
    """

    input:
        in_bam=BASE_DIR + "cellranger_output/{sample}_CITE/outs/possorted_genome_bam.bam"
    output:
        out_bam=BASE_DIR + "unmapped_bams/{sample}_unmapped.bam"
    shell:
        """samtools view -b -f 4 {input.in_bam} > {output.out_bam}; samtools index {output.out_bam}"""

###############################################################################
# Convert unmapped BAM file to FASTQ
###############################################################################
rule convert_bam2fastq:
    """
    Convert unmapped reads file to FASTQ - only keeping reads with error-corrected cell barcode and UMI
    """

    input:
        bam=BASE_DIR + "unmapped_bams/{sample}_unmapped.bam"
    output:
        fastq=BASE_DIR + "unmapped_bams/{sample}.fastq.gz"
    params:
        python_script=config['Conversion']['bam2fastq'],
        log="logs/{sample}.bam2fastq.log"
    shell:
        """python3 {params.python_script} --bam {input.bam} --fastq {output.fastq} --log {params.log} """

###############################################################################
# Create a FASTA index for the Viral FASTA sequences
###############################################################################
rule index_fasta_faidx:
    """
    Index reference FASTA sequences with samtools
    """

    input:
        fasta=BASE_DIR + "fasta/{reference}.fasta"
    output:
        index=BASE_DIR + "fasta/{reference}.fasta.fai"
    shell:
        """samtools faidx {input.fasta} """

###############################################################################
# Create a BWA index for the Viral FASTA sequences
###############################################################################
rule index_fasta_bwa:
    """
    Index reference FASTA sequences with BWA 
    """

    input:
        fasta=BASE_DIR + "fasta/{reference}.fasta"
    output:
        index=BASE_DIR + "fasta/{reference}.bwt"
    params:
        prefix=BASE_DIR + "fasta/{reference}"

    shell:
        """bwa index -p {params.prefix} {input.fasta} """

###############################################################################
# Align reads to viral genomes with BWA-MEM
###############################################################################
rule bwa_align:
    """
    Align unmapped single-cell RNA-sequencing reads to NCBI viral genomes using BWA-MEM
    """

    input:
        fastq=BASE_DIR + "unmapped_bams/{sample}.fastq.gz",
        viral_fasta=BASE_DIR + "fasta/{reference}.fasta",
        faindex=BASE_DIR + "fasta/{reference}.fasta.fai",
        bwa_index=BASE_DIR + "fasta/{reference}.bwt"
    output:
        sam=BASE_DIR + "bam.dir/{sample}.{reference}.sam"
    params:
        ref_prefix=BASE_DIR + "fasta/{reference}",
        threads=12,
        seed_length=10,
        gap_length=1500,
        reseed=0.5,
        multihit=100000000000,
        match_score=8,
        mis_penalty=1,
    shell:
        """bwa mem -k {params.seed_length} -w {params.gap_length} -r {params.reseed} -c {params.multihit} -t {params.threads} -A {params.match_score} -B {params.mis_penalty} {params.ref_prefix} {input.fastq} > {output.sam}"""


#############################################################################
# Run final file permission checks
#############################################################################
rule check_permissions:
    """
    This needs to check that all files are at least 777 permission, and if not set them - probs use a bash script for this
    """
    input: ["cellranger_output", "SCE", "fastq", "reports", "QC", "quant.dir", "demultiplexed", "genotypes"]
    output: "checked_files.txt" # a file that exists if, and only if, all permissions are 777
    params:
        permission_script=config['FinalCheck']['permission_script']
    shell:
        """bash {params.permission_script} {input}; touch {output}"""
