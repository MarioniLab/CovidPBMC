import pandas as pd
import os
import re

#############################################################################
# M.D. Morgan, K. Bach
# COVID19 scRNA-seq pipeline 
# This pipeline takes FASTQ files generated using the 10X Chromium platform, QCs, aligns and quant them 
# using the STAR aligner, and internal barcode assignment using CellRanger. Cell barcodes representing 
# bonafide cells are called outside of Cell Ranger using emptyDrops.
# The final steps are single-cell QC, normalisation and report generation
# Usage:
#  snakemake --cluster 'bsub -q research-rh74 -M {cluster.memory} -R {cluster.resources} -n {cluster.nodes} -T 1500' --jobs=100
# nohup nice -19 snakemake -s CovidPBMC/snakemake_files/Snakefile --cluster "bsub -q research-rh74 -M {cluster.memory} -R {cluster.resources} -n {cluster.nCPUs} -T {cluster.threads} 
#                        -J {cluster.name} -e {cluster.error} -o {cluster.output}" --cluster-config CovidPBMC/cluster_config/cluster.json --jobs=100 --latency-wait=250 --verbose --rerun-incomplete -rp&
#############################################################################
configfile: "CovidPBMC/site_profile/configEBI.yaml"
configfile: "CovidPBMC/config/config.yaml"

BASE_DIR = "/hps/nobackup/research/marioni/covid19/"

workdir: BASE_DIR

## Make sure the the test samples are commented out for running genuine samples
## Regex for the differnt filename components
#FILE_REGEX = re.compile("(\w+)_(S[0-9]?)_(L[0-9]+)_([R|I][1|2])_00[0-9]")
SAMPLES = [fx for fx in glob_wildcards(BASE_DIR + "test_data/fastq/{sample}.fastq.gz")][0]
#print(SAMPLES)
CITE_REGEX = re.compile("(\w+)_(5gex|antibody)_(S[0-9]?)_(L[0-9]+)_([R|I][1|2])_00[0-9]")
TCR_REGEX = re.compile("(\w+)_t_(S[0-9]?)_(L[0-9]+)_([R|I][1|2])_00[0-9]")
BCR_REGEX = re.compile("(\w+)_b_(S[0-9]?)_(L[0-9]+)_([R|I][1|2])_00[0-9]")
CITE_SAMPLES = [gx for gx in SAMPLES if CITE_REGEX.search(gx)]
TCR_SAMPLES = [tx for tx in SAMPLES if TCR_REGEX.search(tx)]
BCR_SAMPLES = [bx for bx in SAMPLES if BCR_REGEX.search(bx)]

#print(CITE_SAMPLES)
#############################################################################
# Define a set of tasks to run locally
############################################################################
localrules: all

#############################################################################
# Input Rule
#############################################################################
rule all:
     input: [BASE_DIR + "test_data/fastq/{filename}.fastq.gz".format(filename=CITE_REGEX.search(rx).group(0)) for rx in CITE_SAMPLES],
            [BASE_DIR + "test_data/fastq/{filename}.fastq.gz".format(filename=TCR_REGEX.search(tx).group(0)) for tx in TCR_SAMPLES],
            [BASE_DIR + "test_data/fastq/{filename}.fastq.gz".format(filename=BCR_REGEX.search(bx).group(0)) for bx in BCR_SAMPLES],
            expand(BASE_DIR + "cellranger_output/{sample}_CITE", sample=[CITE_REGEX.search(ox).group(1) for ox in CITE_SAMPLES]),
            expand(BASE_DIR + "cellranger_output/{sample}_TCR", sample=[TCR_REGEX.search(to).group(1) for to in TCR_SAMPLES]),
            expand(BASE_DIR + "cellranger_output/{sample}_BCR", sample=[BCR_REGEX.search(bo).group(1) for bo in BCR_SAMPLES])
	#expand("fastq/{sample}.fastq.gz", sample=SAMPLES)

#############################################################################
# Run GEX & ADT Cell Ranger
#############################################################################
rule run_CITE_cellranger:
    """
    Run CellRanger to process gene expression and Antibody libraries
    """
    input:
        files=["test_data/fastq/{filename}.fastq.gz".format(filename=CITE_REGEX.search(rx).group(0)) for rx in CITE_SAMPLES],
        libs=list(set(["{wdir}test_data/lib_files/{filename}_5gex_protein_library.csv".format(wdir=BASE_DIR, filename=CITE_REGEX.search(rx).group(1)) for rx in CITE_SAMPLES]))
    params:
        sampname=list(set(["{filename}_CITE".format(filename=CITE_REGEX.search(rx).group(1)) for rx in CITE_SAMPLES])),
        transcriptome=config['hg38_SarsCov2']['referenceFolder'],
        feature_refs=config['params']['featureReference'],
        cellranger_out="cellranger_output/"
    output:
        outs=directory(BASE_DIR + "cellranger_output/" + "{sample}_CITE")
    log:
        "logs/cellranger_{sample}_CITE.log"
    shell:
        "cd %s/cellranger_output/; cellranger count --id={params.sampname} --transcriptome={params.transcriptome} --libraries={input.libs} --feature-ref={params.feature_refs}  --localcores=24 --localmem=60 --nosecondary; cd %s" % (BASE_DIR, BASE_DIR)

#############################################################################
# Run TCR Cell Ranger
#############################################################################
rule run_TCR_cellranger:
    """
    Run CellRanger to process TCR libraries
    """
    input:
        files=["test_data/fastq/{filename}.fastq.gz".format(filename=TCR_REGEX.search(tx).group(0)) for tx in TCR_SAMPLES]
    params:
        sampname=list(set(["{filename}_t".format(filename=TCR_REGEX.search(rx).group(1)) for rx in TCR_SAMPLES])),
        reference=config['hg38_vdj']['referenceFolder'],
        fastq_dir="{wdir}/test_data/fastq".format(wdir=BASE_DIR),
        cellranger_out="cellranger_output/",
        samp_id="{sample}_TCR"
    output:
        outs=directory(BASE_DIR + "cellranger_output/" + "{sample}_TCR")
    shell:
        "cd %s/cellranger_output/; cellranger vdj --id={params.samp_id} --fastqs={params.fastq_dir} --reference={params.reference} --sample={params.sampname} --localcores=24 --localmem=60; cd %s" % (BASE_DIR, BASE_DIR)

#############################################################################
# Run BCR Cell Ranger
#############################################################################
rule run_BCR_cellranger:
    """
    Run CellRanger to process BCR libraries
    """
    input:
        files=["test_data/fastq/{filename}.fastq.gz".format(filename=BCR_REGEX.search(bx).group(0)) for bx in BCR_SAMPLES] 
    params:
        sampname=list(set(["{filename}_b".format(filename=BCR_REGEX.search(rx).group(1)) for rx in BCR_SAMPLES])),
        reference=config['hg38_vdj']['referenceFolder'],
        fastq_dir="{wdir}/test_data/fastq".format(wdir=BASE_DIR),
        samp_id="{sample}_BCR"
    output:
        outs=directory(BASE_DIR + "cellranger_output/" + "{sample}_BCR")
    shell:
        "cd %s/cellranger_output/; cellranger vdj --id={params.samp_id} --fastqs={params.fastq_dir}  --reference={params.reference} --sample={params.sampname} --localcores=24 --localmem=60; cd %s" % (BASE_DIR, BASE_DIR)
